// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name     String
  email    String @unique
  password String

  // One to Many
  createdChores Chore[]       @relation("createdChores")
  messages      ChatMessage[]
  ownedChats    Chat[]        @relation("ownedChats")

  // Many to Many
  choreIds       String[] @db.Array(ObjectId)
  ownedHouseIds  String[] @db.Array(ObjectId)
  memberHouseIds String[] @db.Array(ObjectId)
  guestHouseIds  String[] @db.Array(ObjectId)
  roomIds        String[] @db.Array(ObjectId)
  chatIds        String[] @db.Array(ObjectId)

  chores       Chore[] @relation("chores", fields: [choreIds])
  ownedHouses  House[] @relation("owners", fields: [ownedHouseIds])
  memberHouses House[] @relation("members", fields: [memberHouseIds])
  guestHouses  House[] @relation("guests", fields: [guestHouseIds])
  rooms        Room[]  @relation(fields: [roomIds])
  chats        Chat[]  @relation("memberChats", fields: [chatIds])

  avatar UserAvatar?
}

model UserAvatar {
  id String @id @default(dbgenerated()) @map("_id") @db.ObjectId

  avatar Bytes

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model House {
  id   String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name String


  // Many to Many
  ownerIds  String[] @db.Array(ObjectId)
  memberIds String[] @db.Array(ObjectId)
  guestIds  String[] @db.Array(ObjectId)

  owners  User[] @relation("owners", fields: [ownerIds])
  members User[] @relation("members", fields: [memberIds])
  guests  User[] @relation("guests", fields: [guestIds])

  // One to Many
  rooms  Room[]
  lists  List[]
  chores Chore[]
  chats  Chat[]
}

model Room {
  id   String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name String

  houseId String @db.ObjectId
  house   House  @relation(fields: [houseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ownerIds String[] @db.Array(ObjectId)
  owners   User[]   @relation(fields: [ownerIds])
}

model List {
  id   String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name String

  houseId String @db.ObjectId
  house   House  @relation(fields: [houseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  items ListItem[]
}

model ListItem {
  id      String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  title   String
  checked Boolean

  listId String @db.ObjectId
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Chore {
  id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name        String
  description String
  completed   Boolean  @default(false)
  dueAt       DateTime

  // Many to Many
  assignedToIds String[] @db.ObjectId
  assignedTo    User[]   @relation("chores", fields: [assignedToIds])

  // One to Many
  houseId     String @db.ObjectId
  createdById String @db.ObjectId

  createdBy User  @relation("createdChores", fields: [createdById], references: [id])
  house     House @relation(fields: [houseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Chat {
  id   String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name String

  // Many to many
  memberIds String[] @db.Array(ObjectId)
  members   User[]   @relation("memberChats", fields: [memberIds])

  // One to Many
  houseId String @db.ObjectId
  ownerId String @db.ObjectId

  house House @relation(fields: [houseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner User  @relation("ownedChats", fields: [ownerId], references: [id])

  messages ChatMessage[]
}

model ChatMessage {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  authorId String @db.ObjectId
  chatid   String @db.ObjectId

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chat   Chat @relation(fields: [chatid], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
